	private static void placeOrders(WebDriver driver, OrdersToBePlaced ordersToBePlaced, int buyIndicator, String bitURL) throws ParseException, InterruptedException {
        List<String> recentBuyPrices = ordersToBePlaced.getRecentBuyPrices();
        
        Map<String, Integer> recentBuyPricesMap = new HashMap<String, Integer>();
        for (String recentBuyPrice : recentBuyPrices) {
        	Integer countOfBuys = recentBuyPricesMap.get(recentBuyPrice);
        	if (countOfBuys == null) {
        		recentBuyPricesMap.put(recentBuyPrice, 1);
        	} else {
        		recentBuyPricesMap.put(recentBuyPrice, countOfBuys+1);
        	}
        }

        Set<Entry<String, Integer>> recentBuyPricesSet = recentBuyPricesMap.entrySet();
        
        if (recentBuyPricesSet.size() > 0) {
    		driver.get(bitURL);
            Thread.sleep(5000);
            WebElement limitTab = findElement(driver, "//*[@id=\"page_content\"]/div/div[3]/aside/div/div/article[2]/div/form/ul[1]/li[2]");
            limitTab.click();
            Thread.sleep(500);
            
            WebElement sellTab = findElement(driver, "//*[@id=\"page_content\"]/div/div[3]/aside/div/div/article[2]/div/form/ul[2]/li[2]");
            sellTab.click();
            Thread.sleep(500);

        	for (Entry<String, Integer> recentBuyPriceEntry : recentBuyPricesSet) {
        		getSellOrderPrice(driver, recentBuyPriceEntry, bitURL);
        	}
        }
        
        Thread.sleep(1000);

        buyIndicator++;
        List<String> recentSellPrices = ordersToBePlaced.getRecentSellPrices();
        Map<String, Integer> recentSellPricesMap = new HashMap<String, Integer>();
        for (String recentSellPrice : recentSellPrices) {
        	Integer countOfSells = recentSellPricesMap.get(recentSellPrice);
        	if (countOfSells == null) {
        		recentBuyPricesMap.put(recentSellPrice, 1);
        	} else {
        		recentBuyPricesMap.put(recentSellPrice, countOfSells+1);
        	}
        }

        Set<Entry<String, Integer>> recentSellPricesSet = recentBuyPricesMap.entrySet();

        if (recentSellPricesSet.size() > 0 || buyIndicator % 60 == 0) {
    		driver.get(bitURL);
            Thread.sleep(2000);
            WebElement limitTab = findElement(driver, "//*[@id=\"page_content\"]/div/div[3]/aside/div/div/article[2]/div/form/ul[1]/li[2]");
            limitTab.click();
            Thread.sleep(500);
        	
        	buyIndicator = 0;
        	for (Entry<String, Integer> recentSellPriceEntry : recentSellPricesSet) {
        		if (!recentSellPriceEntry.getKey().endsWith(".50")) {
            		getBuyOrderPrice(driver, bitURL, recentSellPriceEntry);
        		}
        	}
        	if (recentSellPrices.size() == 0) {
        		//placeBuyOrderWithCurrentPrice(driver, bitURL, buyIndex);
        	}
        }
	}
	
	private static void getBuyOrderPrice(WebDriver driver, String tradeURL, Entry<String, Integer> sellPriceStr) throws ParseException, InterruptedException {
		Double sellPrice = NumberFormat.getNumberInstance().parse(sellPriceStr.getKey()).doubleValue();
		Double limitBuyPrice = sellPrice;
		
		for (int i = 1; i <= sellPriceStr.getValue(); i++) {
			switch (i) {
			case 1:
				limitBuyPrice = sellPrice - 4.02;
				placeBuyOrder(driver, limitBuyPrice);
				break;
			case 2:
				limitBuyPrice = sellPrice - 9.02;
				placeBuyOrder(driver, limitBuyPrice);
				break;
			case 3:
				limitBuyPrice = sellPrice - 24.02;
				placeBuyOrder(driver, limitBuyPrice);
				break;
			case 4:
				limitBuyPrice = sellPrice - 49.02;
				placeBuyOrder(driver, limitBuyPrice);
				break;
			default:
				break;
			}
		}
	}

	private static void placeBuyOrder(WebDriver driver, double limitBuyPrice) throws ParseException, InterruptedException {
		System.out.println("Placing Buy Order for : " + limitBuyPrice);

        WebElement currentPriceElement = driver.findElement(By.xpath("//*[@id=\"page_content\"]/div/div[2]/div/div[1]/ul/li[2]/h4/span[1]"));
        String currentPriceFullStr = currentPriceElement.getText();
		String currentPriceDollarStr = currentPriceFullStr.substring(0,currentPriceFullStr.indexOf(" "));
		double currentPrice = NumberFormat.getNumberInstance(java.util.Locale.US).parse(currentPriceDollarStr).doubleValue();

		//TODO: REDUCE TIMESTAMP BETWEEN TEXT BOXES FROM 1000-->100
		if (limitBuyPrice >= currentPrice) {
			//limitBuyPrice = Math.round(currentPrice) - 300.51;
			limitBuyPrice = limitBuyPrice - 300;
		}

        WebElement amountField = driver.findElement(By.xpath("//*[@id=\"page_content\"]/div/div[3]/aside/div/div/article[2]/div/form/div[1]/div[1]/div[2]/input"));
        amountField.clear();
        amountField.sendKeys("0.01");
        WebElement limitPrice = driver.findElement(By.xpath("//*[@id=\"page_content\"]/div/div[3]/aside/div/div/article[2]/div/form/div[1]/div[2]/div[2]/input"));
        limitPrice.clear();
        limitPrice.sendKeys("" + limitBuyPrice);
        Thread.sleep(500);
        WebElement placeOrderButton = driver.findElement(By.xpath("//*[@id=\"page_content\"]/div/div[3]/aside/div/div/article[2]/div/form/button"));
        placeOrderButton.click();
        Thread.sleep(1000);
		
	}

	private static void getSellOrderPrice(WebDriver driver, Entry<String, Integer> recentBuyPriceEntry, String tradeURL) throws ParseException, InterruptedException {
		
		Double boughtPrice = NumberFormat.getNumberInstance().parse(recentBuyPriceEntry.getKey()).doubleValue();
		Double limitSellPrice = boughtPrice;
		
		for (int i=1; i<= recentBuyPriceEntry.getValue(); i++) {
			switch (i) {
			case 1:
				limitSellPrice = boughtPrice + 4.02;
				placeSellOrder(driver, limitSellPrice);;
				break;
			case 2:
				limitSellPrice = boughtPrice + 9.02;
				placeSellOrder(driver, limitSellPrice);;
				break;
			case 3:
				limitSellPrice = boughtPrice + 24.02;
				placeSellOrder(driver, limitSellPrice);;
				break;
			case 4:
				limitSellPrice = boughtPrice + 49.02;
				placeSellOrder(driver, limitSellPrice);;
				break;
			default:
				break;
			};
		}
	}

	private static void placeSellOrder(WebDriver driver, double limitSellPrice) throws InterruptedException, ParseException {
		System.out.println("Placing Sell Order for : " + limitSellPrice);

        WebElement currentPriceElement = findElement(driver, "//*[@id=\"page_content\"]/div/div[2]/div/div[1]/ul/li[2]/h4/span[1]");
        String currentPriceFullStr = currentPriceElement.getText();
		String currentPriceDollarStr = currentPriceFullStr.substring(0,currentPriceFullStr.indexOf(" "));
		double currentPrice = NumberFormat.getNumberInstance(java.util.Locale.US).parse(currentPriceDollarStr).doubleValue();

		if (limitSellPrice <= currentPrice) {
			limitSellPrice = Math.round(currentPrice) + 1.50;
		}
		
        Thread.sleep(1000);
        WebElement amountField = driver.findElement(By.xpath("//*[@id=\"page_content\"]/div/div[3]/aside/div/div/article[2]/div/form/div[1]/div[1]/div[2]/input"));
        amountField.clear();
        amountField.sendKeys("0.01");
        WebElement limitPrice = driver.findElement(By.xpath("//*[@id=\"page_content\"]/div/div[3]/aside/div/div/article[2]/div/form/div[1]/div[2]/div[2]/input"));
        limitPrice.clear();
        limitPrice.sendKeys("" + limitSellPrice);
        Thread.sleep(500);
        WebElement placeOrderButton = driver.findElement(By.xpath("//*[@id=\"page_content\"]/div/div[3]/aside/div/div/article[2]/div/form/button"));
        placeOrderButton.click();
        Thread.sleep(1000);
	}
